// 멀티 모듈 방식으로 설계(플러그인은 루트에서는 선언만 하고 하위에서 사용함)
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3' apply false        // 🚀 Spring Boot 플러그인
    id 'io.spring.dependency-management' version '1.1.3' apply false // 📦 의존성 관리 플러그인
    id 'com.google.cloud.tools.jib' version '3.4.0' apply false      // 🐳 Docker 이미지 빌드용 플러그인
}

// 🛠️ 공통 설정 변수 정의
ext {
    springBootVersion = '3.1.3'
    springDependencyManagementVersion = '1.1.3'
    jibPluginVersion = '3.4.0'
    javaVersion = JavaVersion.VERSION_17
    projectVersion = '1.0.0'
}

// 🏷️ 그룹 ID 및 버전
group = 'com.lsy'
version = projectVersion

// ☕ Java 버전 설정
java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

// 🌐 의존성 저장소 (모든 모듈 공통)
repositories {
    mavenCentral()
}

// 📁 하위 모듈 공통 설정
subprojects {
    // 루트 플러그인 적용
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.google.cloud.tools.jib'
    // subprojects에서 선언 시 루트의 저장소를 덮어씀(이게 우선순위가 됨)
    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    java {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    // 하위 모듈에 공통으로 적용되는 의존성들
    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter-web'
         // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}

// api-common 모듈 설정
project(':api-common') {
    // 일반 JAR은 생성 (다른 모듈에서 공통 코드 사용 가능하도록)
    jar.enabled = true
    // 실행 가능한 Spring Boot JAR은 생성하지 않음
    bootJar.enabled = false

    // ✅ 공통 모듈은 실행되지 않으며, 컴파일 시 필요한 의존성만 선언합니다.
    // ※ 실제 런타임 의존성은 이 모듈을 사용하는 쪽에서 반드시 명시해야 합니다.
    dependencies {
        // Spring MVC 관련
        compileOnly 'org.springframework:spring-webmvc'

        // 프로퍼티 바인딩 자동 완성 및 검증을 위한 Configuration Processor
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        // Tomcat (내장 서블릿 컨테이너 필요 시)
        compileOnly 'org.apache.tomcat.embed:tomcat-embed-core'

        // 로깅 인터페이스  (구현체는 사용하는 모듈에서 logback 등으로 구성)
        compileOnly 'org.slf4j:slf4j-api'

        // Jasypt (암호화/복호화 라이브러리)
        compileOnly 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

        // aop 설정
        compileOnly 'org.springframework:spring-aop'

        // 공통 유틸 라이브러리 (문자열 처리, 파일 등)
        compileOnly 'org.apache.commons:commons-lang3'
        compileOnly 'commons-io:commons-io:2.11.0'

        // Redis 연동 관련 유틸 정의 시
        compileOnly 'org.springframework.boot:spring-boot-starter-data-redis:3.2.4'
        compileOnly 'io.lettuce:lettuce-core:6.3.2.RELEASE'

        // 유효성 검증 관련 공통 로직 작성 시
        compileOnly 'org.springframework.boot:spring-boot-starter-validation'
    }
}

// API 서비스 모듈(추후 file-api, auth-api 등 계속 추가해서 공통적으로 적용 예정)
def apiModules = [
        project(':menu-api'),
        //project(':file-api')...
]
// API 서비스 모듈에 공통으로 적용
configure(apiModules) {
    jar.enabled = false
    bootJar.enabled = true

    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter-web'

        implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        // 로깅
        implementation 'org.slf4j:slf4j-api'

        // Jasypt (암호화/복호화 라이브러리)
        implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

        // 공통 유틸 라이브러리 (문자열 처리, 파일 등)
        implementation 'org.apache.commons:commons-lang3'
        implementation 'commons-io:commons-io:2.11.0'

        // querydsl
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        // querydsl 로그(add Param)
        implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

        // 유효성 검증 관련 공통 로직 작성 시
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // redis
        implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.4'
        implementation 'io.lettuce:lettuce-core:6.3.2.RELEASE'

        // aop 설정
        implementation 'org.springframework:spring-aop'

        // postgresql
        implementation 'org.postgresql:postgresql:42.6.0'

        // swagger
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

        // 공통 모듈 참조
        implementation project(':api-common')
    }

    def querydslDir = '$buildDir/generated/querydsl'

    // java source set 에 Querydsl Q Class 위치 추가
    sourceSets {
        main.java.srcDirs += [ querydslDir ]
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    // 생성된 Q Class가 컴파일될 디렉토리 설정
    tasks.withType(JavaCompile).configureEach {
        options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
    }

    // gradle clean 시, Q Class가 위치한 디렉토리 삭제
    clean.doLast {
        file(querydslDir).deleteDir()
    }
}
